name: Auto Release

on:
  push:
    branches:
      - master
      - main

permissions:
  contents: write

jobs:
  auto-tag-release:
    name: Auto Tag and Release
    runs-on: ubuntu-latest
    # Skip if commit message contains [skip ci] or [no release]
    if: "!contains(github.event.head_commit.message, '[skip ci]') && !contains(github.event.head_commit.message, '[no release]')"
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24'

      - name: Run tests
        run: go test -v ./...

      - name: Get latest tag
        id: get_latest_tag
        run: |
          # Get the latest tag, or default to v0.0.0
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          echo "latest_tag=$LATEST_TAG" >> $GITHUB_OUTPUT
          echo "Latest tag: $LATEST_TAG"

      - name: Determine version bump
        id: version_bump
        run: |
          COMMIT_MSG="${{ github.event.head_commit.message }}"
          LATEST_TAG="${{ steps.get_latest_tag.outputs.latest_tag }}"

          # Remove 'v' prefix
          VERSION=${LATEST_TAG#v}

          # Split version into major, minor, patch
          IFS='.' read -r -a VERSION_PARTS <<< "$VERSION"
          MAJOR="${VERSION_PARTS[0]}"
          MINOR="${VERSION_PARTS[1]}"
          PATCH="${VERSION_PARTS[2]}"

          # Determine bump type based on commit message
          if [[ $COMMIT_MSG =~ ^BREAKING|^feat!|^fix!|^refactor! ]]; then
            # Major version bump
            MAJOR=$((MAJOR + 1))
            MINOR=0
            PATCH=0
            BUMP_TYPE="major"
          elif [[ $COMMIT_MSG =~ ^feat ]]; then
            # Minor version bump
            MINOR=$((MINOR + 1))
            PATCH=0
            BUMP_TYPE="minor"
          else
            # Patch version bump
            PATCH=$((PATCH + 1))
            BUMP_TYPE="patch"
          fi

          NEW_VERSION="v${MAJOR}.${MINOR}.${PATCH}"
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "bump_type=$BUMP_TYPE" >> $GITHUB_OUTPUT
          echo "New version: $NEW_VERSION (bump: $BUMP_TYPE)"

      - name: Generate changelog
        id: changelog
        run: |
          LATEST_TAG="${{ steps.get_latest_tag.outputs.latest_tag }}"

          if [ "$LATEST_TAG" = "v0.0.0" ]; then
            # First release - get all commits
            CHANGELOG=$(git log --pretty=format:"- %s (%h by @%an)" --no-merges | head -20)
          else
            # Get commits since previous tag
            CHANGELOG=$(git log ${LATEST_TAG}..HEAD --pretty=format:"- %s (%h by @%an)" --no-merges)
          fi

          # Escape for GitHub Actions
          CHANGELOG="${CHANGELOG//'%'/'%25'}"
          CHANGELOG="${CHANGELOG//$'\n'/'%0A'}"
          CHANGELOG="${CHANGELOG//$'\r'/'%0D'}"

          echo "changelog=$CHANGELOG" >> $GITHUB_OUTPUT

      - name: Create and push tag
        run: |
          NEW_VERSION="${{ steps.version_bump.outputs.new_version }}"

          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          git tag -a "$NEW_VERSION" -m "Release $NEW_VERSION"
          git push origin "$NEW_VERSION"

      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.version_bump.outputs.new_version }}
          release_name: Release ${{ steps.version_bump.outputs.new_version }}
          body: |
            ## üöÄ What's Changed

            ${{ steps.changelog.outputs.changelog }}

            ## üì¶ Installation

            ```bash
            go get github.com/Makennsky/aqylly@${{ steps.version_bump.outputs.new_version }}
            ```

            ## üìù Commit Convention

            - `feat:` - New feature (minor version bump)
            - `fix:` - Bug fix (patch version bump)
            - `BREAKING:` or `feat!:` - Breaking change (major version bump)
            - Add `[no release]` to commit message to skip auto-release

            **Full Changelog**: https://github.com/Makennsky/aqylly/compare/${{ steps.get_latest_tag.outputs.latest_tag }}...${{ steps.version_bump.outputs.new_version }}
          draft: false
          prerelease: false
